package models;

import Queue.RecieveBatchRequest;
import changeImage.changeImageHandler;
import changeImage.changeImageRequest;
import changeImage.changeImageResponse;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.BatchWriteItemOutcome;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.TableWriteItems;
import com.amazonaws.services.lambda.runtime.Context;
import com.fasterxml.jackson.databind.ser.Serializers;
import follow.FollowHandler;
import follow.FollowRequest;
import follow.FollowResponse;
import getFeed.GetFeedHandler;
import getFeed.GetFeedRequest;
import getFeed.GetFeedResponse;
import getFollowers.GetFollowersHandler;
import getFollowers.GetFollowersRequest;
import getFollowers.GetFollowersResponse;
import getFollowing.GetFollowingHandler;
import getFollowing.GetFollowingRequest;
import getFollowing.GetFollowingResponse;
import getMentions.GetMentionsHandler;
import getMentions.GetMentionsRequest;
import getMentions.GetMentionsResponse;
import getStatus.GetStatusHandler;
import getStatus.GetStatusRequest;
import getStatus.GetStatusResponse;
import getStory.GetStoryHandler;
import getStory.GetStoryRequest;
import getStory.GetStoryResponse;
import getUser.GetUserHandler;
import getUser.GetUserRequest;
import getUser.GetUserResponse;
import login.LoginHandler;
import login.LoginRequest;
import login.LoginResponse;
import logout.LogoutHandler;
import logout.LogoutRequest;
import logout.LogoutResponse;
import org.apache.commons.codec.binary.Base64;
import postStatus.postStatusHandler;
import postStatus.postStatusRequest;
import postStatus.postStatusResponse;
import signup.SignupHandler;
import signup.SignupRequest;
import signup.SignupResponse;
import unfollow.UnfollowHandler;
import unfollow.UnfollowRequest;
import unfollow.UnfollowResponse;

import javax.swing.*;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

public class Test {
    public static void main(String[] args) {

        Context context = null;
//        GetUserHandler getUserHandler = new GetUserHandler();
//        GetUserRequest getUserRequest = new GetUserRequest();
//        getUserRequest.username = "rogue";
//        GetUserResponse getUserResponse = getUserHandler.handleRequest(getUserRequest, context);
//        System.out.println(getUserResponse.user.profilePic);

//        GetStatusHandler getStatusHandler = new GetStatusHandler();
//        GetStatusRequest getStatusRequest = new GetStatusRequest();
//        getStatusRequest.username = "rogue";
//        getStatusRequest.timestamp = new BigInteger("1574498128500");
//        GetStatusResponse getStatusResponse = getStatusHandler.handleRequest(getStatusRequest, context);
//        System.out.println(getStatusResponse.status.textAttachment);

//        GetStoryHandler handler = new GetStoryHandler();
//        GetStoryRequest request = new GetStoryRequest();
//        request.username = "vboi";
//        GetStoryResponse result = handler.handleRequest(request, context);
//        System.out.println(result.story);

//        GetMentionsHandler mentionsHandler = new GetMentionsHandler();
//        GetMentionsRequest mentionsRequest = new GetMentionsRequest();
//        mentionsRequest.keyword = "#cat";
//        GetMentionsResponse mentionsResult = mentionsHandler.handleRequest(mentionsRequest, context);

//        LoginHandler loginHandler = new LoginHandler();
//        LoginRequest loginRequest = new LoginRequest();
//        loginRequest.password = "blarg";
//        loginRequest.username = "vboi";
//        LoginResponse loginResponse = loginHandler.handleRequest(loginRequest, context);
//        System.out.println(loginResponse.message + " " + loginResponse.authToken);


//        LogoutHandler logoutHandler = new LogoutHandler();
//        LogoutRequest logoutRequest = new LogoutRequest();
//        logoutRequest.authToken = "KkyHiueTbr";
//        logoutRequest.username = "rogue";
//        LogoutResponse logoutResponse = logoutHandler.handleRequest(logoutRequest, context);
//        System.out.println(logoutResponse.message);

//        SignupHandler signupHandler = new SignupHandler();
//        SignupRequest signupRequest = new SignupRequest();
//        signupRequest.firstName = "John";
//        signupRequest.lastName = "Cena";
//        signupRequest.username = "jonncena";
//        signupRequest.password = "cena";
//        signupRequest.image = "";
//        SignupResponse signupResponse = signupHandler.handleRequest(signupRequest, context);
//        System.out.println(signupResponse.message);
//
//        GetFeedHandler getFeedHandler = new GetFeedHandler();
//        GetFeedRequest getFeedRequest = new GetFeedRequest();
//        getFeedRequest.authToken = "4bdmcUQswt";
//        getFeedRequest.username = "vboi";
//        GetFeedResponse getFeedResponse = getFeedHandler.handleRequest(getFeedRequest, context);
//        System.out.println(getFeedResponse.message);
//
//        GetFollowersHandler getFollowersHandler = new GetFollowersHandler();
//        GetFollowersRequest getFollowersRequest = new GetFollowersRequest();
//        getFollowersRequest.username = "vboi";
//        GetFollowersResponse getFollowersResponse = getFollowersHandler.handleRequest(getFollowersRequest, context);
//        System.out.println(getFollowersResponse.followers.size());

//        GetFollowingHandler getFollowingHandler = new GetFollowingHandler();
//        GetFollowingRequest getFollowingRequest = new GetFollowingRequest();
//        getFollowingRequest.username = "stseraphim";
//        GetFollowingResponse getFollowingResponse = getFollowingHandler.handleRequest(getFollowingRequest, context);
//        System.out.println(getFollowingResponse.following.size());

//        FollowHandler followHandler = new FollowHandler();
//        FollowRequest followRequest = new FollowRequest();
//        followRequest.authToken = "[B@7f32c033";
//        followRequest.username = "vboi";
//        followRequest.follower = "stseraphim";
//        FollowResponse followResponse = followHandler.handleRequest(followRequest, context);
//        System.out.println(followResponse.message);

//        UnfollowHandler unfollowHandler = new UnfollowHandler();
//        UnfollowRequest unfollowRequest = new UnfollowRequest();
//        unfollowRequest.authToken =  "[B@7f32c033";
//        unfollowRequest.follower = "stseraphim";
//        unfollowRequest.username = "vboi";
//        UnfollowResponse unfollowResponse = unfollowHandler.handleRequest(unfollowRequest, context);
//        System.out.println(unfollowResponse.message);

        postStatusHandler pHandler = new postStatusHandler();
        postStatusRequest pRequest = new postStatusRequest();
        pRequest.message = "Much john cena very wow such grace";
        pRequest.username = "johncena";
        pRequest.authToken = "pVFJWlks6n";
        pRequest.textAttachment = "";
        pRequest.imageAttachment = "";
        postStatusResponse pResponse = pHandler.handleRequest(pRequest, context);
        System.out.println(pResponse.message);

//        changeImageHandler cHandler = new changeImageHandler();
//        changeImageRequest cRequest = new changeImageRequest();
//        cRequest.username = "itsjohncena";
//        cRequest.authToken = "V3xb3cREl8";
//        cRequest.image = "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";
//        changeImageResponse cResponse = cHandler.handleRequest(cRequest, context);
//        System.out.println(cResponse.message);

        //uploadAFrighteningNumberOfUsers();

    }

    public static void uploadAFrighteningNumberOfUsers() {
        ArrayList<ArrayList<User>> userBatches = getUsers();
        SignupHandler handler = new SignupHandler();
        SignupRequest request = new SignupRequest();
        for (ArrayList<User> userBatch : userBatches) {
            ArrayList<Item> followBatch = new ArrayList<>();
            ArrayList<Item> createBatch = new ArrayList<>();
            for (User user:userBatch) {
                Item followItem = new Item()
                        .withPrimaryKey("user", "johncena", "follower", user.username)
                        .withLong("timestamp", Instant.now().toEpochMilli());
                Item createUserItem = new Item()
                        .withPrimaryKey("Username", user.username)
                        .withString("firstName", user.firstName)
                        .withString("lastName", user.lastName)
                        .withString("password", new String(Base64.encodeBase64String(user.password.getBytes())));
                followBatch.add(followItem);
                createBatch.add(createUserItem);
            }
            writeBatchFollows(followBatch);
            writeBatchCreateUser(createBatch);
        }
    }

    public static ArrayList<ArrayList<User>> getUsers() {
        ArrayList<ArrayList<User>> userBatches = new ArrayList<>();
        for (int i = 0; i < 24; ++i) {
            ArrayList<User> users = new ArrayList<>();
            for (int j = 0; j < 25; ++j) {
                User u = new User(rand(), rand(), rand(), rand());
                users.add(u);
            }
            userBatches.add(users);
        }
        return userBatches;
    }

    public static String rand() {
        String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        SecureRandom rnd = new SecureRandom();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < 10; ++i) {
            stringBuilder.append( AB.charAt( rnd.nextInt(AB.length()) ) );
        }
        String auth = stringBuilder.toString();
        return auth;
    }

    public static void writeBatchFollows(ArrayList<Item> batch) {
        System.out.println(batch.size());
        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()
                .withRegion(Regions.US_EAST_1)
                .build();
        DynamoDB dynamoDB = new DynamoDB(client);
        TableWriteItems tableWriteItems = new TableWriteItems("UserFollows")
                .withItemsToPut(batch);
        BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(tableWriteItems);
        // Check for unprocessed keys which could happen if you exceed
        // provisioned throughput
        while (outcome.getUnprocessedItems().size() > 0) {
            outcome = dynamoDB.batchWriteItemUnprocessed(outcome.getUnprocessedItems());
        }
    }
    public static void writeBatchCreateUser(ArrayList<Item> batch) {
        System.out.println(batch.size());
        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()
                .withRegion(Regions.US_EAST_1)
                .build();
        DynamoDB dynamoDB = new DynamoDB(client);
        TableWriteItems tableWriteItems = new TableWriteItems("Users")
                .withItemsToPut(batch);
        BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(tableWriteItems);
        // Check for unprocessed keys which could happen if you exceed
        // provisioned throughput
        while (outcome.getUnprocessedItems().size() > 0) {
            outcome = dynamoDB.batchWriteItemUnprocessed(outcome.getUnprocessedItems());
        }
    }

}
